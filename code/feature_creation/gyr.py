
"""
Generated by Google Colaboratory
Original code was run on Colaboratory
It is downloaded as .py file
"""
############################################################################################################

from google.colab import files
uploaded = files.upload() # Use these codes only when using Google Colaboratory

#File Importing and Setting Data 
import numpy as np
import pandas as pd
from sklearn.metrics import confusion_matrix
import io
df = pd.read_csv(io.BytesIO(uploaded['gyr_mutation.csv']),low_memory=False)
df.head()

new_df = df.drop('ID',axis=1) #Drop the column named 'ID'
X = new_df.drop('Class',axis=1)
y = new_df['Class']
X = np.c_[X]
type(X)

print(X.shape, y.shape)

############################################################################################################
# Load libraries
from sklearn.ensemble import AdaBoostClassifier

# Import accuracy score
from sklearn.metrics import accuracy_score

# Create adaboost classifer object
classifier =AdaBoostClassifier(n_estimators=150,learning_rate=0.05) # Selecting base estimator default i.e. Decision tree

############################################################################################################
# Import library for cross validaton
from sklearn.model_selection import StratifiedKFold
accuracy =[]
confusion_mat = {}
np.random.seed(40428)
skf =StratifiedKFold(n_splits=5,shuffle=True)
 
for train_index, test_index in skf.split(X, y):
  model= classifier.fit(X[train_index], y[train_index])
  prediction = model.predict(X[test_index])
  score = accuracy_score(prediction,y[test_index])
  c = confusion_matrix(y[test_index],prediction,labels=[1,0])
  confusion_mat[acc+str(score)] = c
  accuracy.append(score)

print(accuracy)

############################################################################################################
# Calculation mean accuracy  
np.array(accuracy).mean()

# observing confusion matrix
confusion_mat

############################################################################################################
